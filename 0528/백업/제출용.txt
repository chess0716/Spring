클라이언트 :

 모든 액티비티에서 공통으로 사용되는 툴바 설정 및 옵선메뉴, 
 홈버튼 활성화를 위해 BaseActivity작성
공통적인 UI 및 인터랙션 요소를 관리하기 위해 사용되며, 다른 모든 액티비티가 
이를 상속받음으로써 
 코드의 중복을 줄이고 일관된 사용자 경험을 제공

메인 액티비티 (MainActivity):
카테고리별 정렬 및 검색 기능: 사용자는 네비게이션 드로어를 통해 
카테고리별 게시물을 필터링할 수 있으며, 
검색바를 통해 키워드 기반으로 게시물을 검색할 수 있음 
네비게이션 드로어와 툴바 설정,
게시물 데이터를 비동기적으로 로딩,
해당 게시물의 상세페이지 이동 구현
RecyclerView 설정: BoardAdapter를 사용하여 게시물 목록을 표시,
사용자는 레이아웃 변경 버튼을 통해 그리드 뷰와 리스트 뷰 사이를 전환할 수 있으며,
 게시물 클릭 시 상세 페이지로 이동

인서트 액티비티 (InsertActivity):
사용자 정보를 SharedPreferences의 getUserName 메서드로 비동기적으로 폼데이터에 인서트
재료 및 카테고리를 enqueue() 메서드를 사용하여 비동기적으로 서버 요청을 실행
서버 응답이 도착하면 onResponse() 콜백 후 카테고리 및 재료 로드
이미지 업로드: 사용자가 이미지를 선택하면 ActivityResultLauncher를 통해 갤러리에서 이미지를 가져오고, 선택된 이미지는 Retrofit을 사용하여 서버에 업로드.

동적 폼 추가: 사용자는 재료 입력 폼을 동적으로 추가할 수 있으며, 각 폼은 카테고리와 재료 이름을 선택하는 드롭다운 스피너를 포함
데이터 제출: 
기능 분리 및 모듈화,확장성을 위해 서브밋 엔드포인트를 레시피와 폼으로 구분 
 (submitAllForms(재료 폼 )은 RequestBody를통해  본문(body) 전체를 해당 파라미터로 바인딩,
 submitRecipe(레시피) 는 RequestParam을 통해  이미지 파일과 같은 멀티파트 데이터를 처리하기 위해)
사용자가 모든 정보를 입력하고 제출 버튼을 클릭하면, 입력된 데이터는
 API 호출을 통해 서버로 전송

SharedPreferences 설정 :
SharedPreferencesHelper: 
안드로이드 앱에서 사용자 정보를 SharedPreferences를 통해 저장,

주요 기능: 사용자 ID, 사용자명, 토큰을 저장하고 가져오는 메서드를 제공하며, 로그인 상태를 확인하고 로그인 정보를 삭제하는 기능을 구현함

디테일 : 부분적인 웹뷰를 사용하여 미보유 ,보유 ,총가격 부분 구현



어댑터 설정 (BoardAdapter):

레이아웃 타입 변환 지원: 사용자는 그리드 뷰와 리스트 뷰 사이를 전환할 수 있으며, 이는 BoardAdapter 내의 isGridLayout 변수를 통해 관리됩니다. 레이아웃 변경 시 notifyDataSetChanged() 메소드를 호출하여 UI를 업데이트
이미지 처리: 
이미지로드 : Picasso 라이브러리를 사용하여 서버에서 제공하는 이미지 URL을 바탕으로 게시물에 이미지를 동적으로 로드, URL에 타임스탬프를 추가하여 브라우저나 서버의 캐시를 우회
서버 측 이미지 처리: 업로드된 이미지는 서버 측에서 크기가 조정되고, 저장될 때 고유 이름이 부여 클라이언트에게는 최종 이미지 URL이 반환되어, 앱 내에서 사용

Retrofit 클라이언트 설정 (RetrofitClient):
BaseURL 설정
HTTP 로깅 인터셉터 추가: OkHttpClient에 HttpLoggingInterceptor를 추가하여 네트워크 요청 및 응답에 대한 상세 로그를 출력, 이를 통해 개발 중 문제를 쉽게 식별
Lazy 초기화 사용: Retrofit 인스턴스 및 서비스 인터페이스는 lazy 초기화를 사용하여 필요할 때 생성, 이를 통해 앱의 메모리 사용량을 최적화하고, 네트워크 통신을 효율적으로 관리

이외 게시물 ,네비게이션 및 메뉴 메인페이지 인서트페이지 디자인
서버 : 

게시글(Board), 카테고리(Category), 사용자(User)의 관계를 중심으로 설계
다대일(ManyToOne) 관계가 형성되며, 이미지 파일 처리를 위해 Board 엔티티에는 MultipartFile 형태의 이미지를 받는 transient 필드가 포함
마이페이지 관련 엔티티 설계  :
 사용자의 프로필 페이지를 효과적으로 표현하고 필요한 정보를 한 곳에 모으기 위해 마이페이지 디티오를 설계 ,
사용자가 작성한 게시글, 찜한 게시글, 결제 요청 목록 등을 포함하여 사용자에게 표시될 정보를 쉽게 제공
이렇게 함으로써 코드의 가독성과 유지보수성을 향상시키고, 프로필 페이지의 개발과 관리를 효율적으로 진행
서비스 및 컨트롤러:
BoardApiController/Service :
게시물검색기능 , 전체게시물 목록조회 , 특정 게시물조회 , 특정게시물의 재료목록조회 , 특정 게시물의 총 가격 계산 , 특정 게시물의 가격갱신 구현 
CategoryiController/Service:
전체카테고리목록조회 , 특정카테고리 조회, 특정 카테고리의 게시물목록조회 구현
FileUploadiController/Service:
파일업로드기능 및 파일저장 구현
UserApiControlleriController/Service:
로그인, 회원가입 기능 구현 
로그인 :  사용자 ID를 가져와서 response에 추가, 로그인 성공,실패 시 반환될 JSON 구조를 만듭니다.

모든컨트롤러에  ObjectMapper를 활용하여 Java 객체와 JSON 문자열 간 변환을 수행,
 Java 8의 날짜 및 시간 API를 JSON 직렬화 및 역직렬화할 수 있도록 Jackson ObjectMapper에 JavaTimeModule을 등록
